?Anova
require(multcomp)
?Anova
library(car)
library(car)
?Anova
sessionInfo()
# setwd('~/Desktop/labserver/Mu_lines/light_dark_experiment/2018/expression/')
setwd("~/Desktop/L&D/expression")
library(gdata)
library(ggplot2)
library(plyr)
library(reshape2)
library(lme4)
library(asreml)
library(scales)
require(multcomp)
library(lmerTest)
library(car)
library(emmeans)
# tocochromanol candidate genes-------------------------------------------------------------
raw_toco=read.xls('../raw/light_dark_genes_of_interest_12june19.xlsx',sheet=2)
raw_toco_re=raw_toco[,c(1,7:48)]
raw_toco_re.m=melt(raw_toco_re)
##reorder genes
raw_toco_re.m$Gene_ID=factor(raw_toco_re.m$Gene_ID,levels=unique(raw_toco$Gene_ID))
##reorder genotypes
all_geno=names(raw_toco[,c(7:48)])
all_geno_sorted=all_geno[c(grep('B73',all_geno),grep('b97',all_geno),grep('M37W',all_geno),
grep('NC358',all_geno),grep('Ki11',all_geno),grep('MS71',all_geno),
grep('OH7B',all_geno))]
raw_toco_re.m$variable=factor(raw_toco_re.m$variable,levels=all_geno_sorted)
#format data for model fitting
data=data.frame(t(raw_toco_re))
names(data)=as.character(unlist(data[1,]))
data=data[-1,]
data$Rep=gsub('.*_.*_R','',row.names(data))
data$Treatment=gsub('.*_(.*)_.*','\\1',row.names(data))
data$genotype=gsub('_.*_.*','',row.names(data))
data[,c(1:88)] <- sapply(data[,c(1:88)], as.character)
data[,c(1:88)] <- sapply(data[,c(1:88)], as.numeric)
data[,c(1:88)] = data[,c(1:88)]+1e-9 #add a small constant to avoid 0 value before log
data[,c(1:88)] <- sapply(data[,c(1:88)], log2)#log2 transformation
genes=names(data)[1:88]
toco_pval=data.frame(matrix(nrow=0,ncol=3))
names(toco_pval)=c('genotype','treatment','genotype:treatment')
tukey_pval=data.frame(matrix(nrow=0,ncol=3))
names(tukey_pval)=c('dark_control','light_control','light_dark')
tukey_pval_sliced=data.frame(matrix(nrow=0,ncol=21))
names(tukey_pval_sliced)=c("B73_dark_control","B73_light_control","B73_light_dark","b97_dark_control","b97_light_control",
"b97_light_dark","Ki11_dark_control","Ki11_light_control","Ki11_light_dark","M37W_dark_control","M37W_light_control",
"M37W_light_dark","MS71_dark_control","MS71_light_control","MS71_light_dark","NC358_dark_control","NC358_light_control",
"NC358_light_dark","OH7B_dark_control","OH7B_light_control","OH7B_light_dark")
genes
i='Zm00001d001896'
##generate anova table
cat(paste('#############################################################\n############ anova table for gene ',i,' ############\n#############################################################\n',sep=''))
mod<-lmer(data[,i] ~ genotype + (1|Rep) + (1|Rep:genotype) + Treatment + genotype:Treatment , data)
print(Anova(mod,test='F'))
#nested tukey
curr_pval=c()
for(j in unique(data$genotype)){
data_curr=data[which(data$genotype==j),]
if(min(data_curr[,i])==max(data_curr[,i])){curr_pval=c(curr_pval,NA,NA,NA)}#no need to fit model if all values are the same
else{
mod<-lmer(data_curr[,i] ~ (1|Rep) + Treatment , data_curr) #singular fit
c=emmeans(mod, list(pairwise ~ Treatment), adjust = "tukey",lmer.df = "satterthwaite")
c=as.data.frame(c$`pairwise differences of Treatment`)
print(c)
curr_pval=c(curr_pval,c$p.value)
}
}
j='B73'
data_curr=data[which(data$genotype==j),]
data_curr
data_curr[,i]
log2(42)
i='b97'
i='Zm00001d001896'
j='b97'
data_curr[,i]
data_curr=data[which(data$genotype==j),]
data_curr[,i]
setwd("~/Desktop/L&D/expression")
library(gdata)
library(ggplot2)
library(plyr)
library(reshape2)
library(lme4)
library(asreml)
library(scales)
require(multcomp)
library(lmerTest)
library(car)
library(emmeans)
setwd("~/Desktop/L&D/pheno_embryo/")
library(gdata)
library(lme4)
library(car)
library(asreml)
library(ggplot2)
library(ggpubr)
library(emmeans)
library(broom)
library(reshape2)
library(lmerTest)
chl=read.xls('EMBRYO_Tocos_Carots_Chlorophyll.xlsx',skip=2,h=T)
chl$Genotype=gsub('b97','B97',chl$Genotype)
chl$Treatment=gsub('dark','Dark',chl$Treatment)
chl$Treatment=gsub('control','Control',chl$Treatment)
chl$Treatment=gsub('light','Light',chl$Treatment)
chl$Genotype=factor(chl$Genotype,levels=c('B73','B97','M37W','NC358','Ki11','MS71','OH7B'))
chl$Treatment=factor(chl$Treatment,levels=c('Dark','Control','Light'))
traits=names(chl)[c(15:21,23:31,33)]
pdf('boxplots_raw_pheno_embryo_treatment.pdf')
for(t in traits){
print(t)
p <- ggplot(chl, aes(x=Treatment, y=get(paste(t)),fill=Treatment)) +
geom_boxplot()+
# facet_grid(.~Genotype, space="free_x",scales="free")+
theme_bw()+
labs(y=paste(t))+
scale_fill_manual(values=c('dodgerblue','gray',"cyan3"))+
theme(plot.background = element_blank(),
panel.spacing.x=unit(0,"lines"),
strip.text.x = element_text(size = 12,face="bold",color="black", angle =360),
strip.background.x=element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
print(p)
}
dev.off()
qt(p= 1-0.05/(2*42), df=(42 - (3 + 2 + 1) - 1) )
setwd("~/Desktop/L&D/pheno_embryo/studentized_residuals")
setwd("~/Desktop/L&D/pheno_embryo/studentized_residuals")
traits=c('aT','dT','gT','aT3','dT3','gT3','TotalT','TotalT3','TotalTT3')
curr=read.csv(paste(t,'.csv',sep=''))
t='aT'
curr=read.csv(paste(t,'.csv',sep=''))
View(curr)
if(t=='aT'){all=curr[c(1,2,3,21)]}
View(all)
print(t)
curr=read.csv(paste(t,'.csv',sep=''))
curr=curr[c(1,2,3,21)]
curr$ID=paste(curr$Treatment,curr$Rep,curr$Genotype,sep='_')
names(curr)[4]=t
View(curr)
t='a.T3'
curr=read.csv(paste(t,'.csv',sep=''))
curr=curr[c(1,2,3,21)]
curr$ID=paste(curr$Treatment,curr$Rep,curr$Genotype,sep='_')
names(curr)[4]=t
View(curr1)
t='aT3'
curr=read.csv(paste(t,'.csv',sep=''))
curr=curr[c(1,2,3,21)]
curr$ID=paste(curr$Treatment,curr$Rep,curr$Genotype,sep='_')
names(curr)[4]=t
if(t=='aT'){all=curr}else{all=merge(all,curr[,4:5])}
View(all)
t='aT'
curr=read.csv(paste(t,'.csv',sep=''))
curr=curr[c(1,2,3,21)]
curr$ID=paste(curr$Treatment,curr$Rep,curr$Genotype,sep='_')
names(curr)[4]=t
if(t=='aT'){all=curr}else{all=merge(all,curr[,4:5],by='ID')}
t='aT3'
curr=read.csv(paste(t,'.csv',sep=''))
curr=curr[c(1,2,3,21)]
curr$ID=paste(curr$Treatment,curr$Rep,curr$Genotype,sep='_')
names(curr)[4]=t
if(t=='aT'){all=curr}else{all=merge(all,curr[,4:5],by='ID')}
View(all)
for(t in traits){
print(t)
curr=read.csv(paste(t,'.csv',sep=''))
curr=curr[c(1,2,3,21)]
curr$ID=paste(curr$Treatment,curr$Rep,curr$Genotype,sep='_')
names(curr)[4]=t
if(t=='aT'){all=curr}else{all=merge(all,curr[,4:5],by='ID')}
}
nbind <- 42 #non-missing observations
fixed=3
random=2
threshold = qt(p= 1-0.05/(2*nbind), df=(nbind-(fixed+random+1)-1))
for(t in traits){
print(t)
curr=read.csv(paste(t,'.csv',sep=''))
curr=curr[c(1,2,3,21)]
curr$ID=paste(curr$Treatment,curr$Rep,curr$Genotype,sep='_')
names(curr)[4]=t
print(length(which(curr[,4]>threshold)))
if(t=='aT'){all=curr}else{all=merge(all,curr[,4:5],by='ID')}
}
#no observation will be removed as outlier
write.csv(all[,-1],'consolidated_studentized_resid.csv',quote=F,row.names = F)
traits=c('aT','dT','gT','aT3','dT3','gT3','TotalT','TotalT3','TotalTT3','chlorophyll')
# studentized residual bonferroni threshold -------------------------------
nbind = 42 #non-missing observations
fixed=3
random=2
threshold = qt(p= 1-0.05/(2*nbind), df=(nbind-(fixed+random+1)-1))
for(t in traits){
print(t)
curr=read.csv(paste(t,'.csv',sep=''))
curr=curr[c(1,2,3,21)]
curr$ID=paste(curr$Treatment,curr$Rep,curr$Genotype,sep='_')
names(curr)[4]=t
print(length(which(curr[,4]>threshold)))
if(t=='aT'){all=curr}else{all=merge(all,curr[,4:5],by='ID')}
}
#no observation will be removed as outlier
write.csv(all[,-1],'consolidated_studentized_resid.csv',quote=F,row.names = F)
setwd("~/Desktop/L&D/pheno_results_mature_kernel/results_2019/BLUE_2019")
traits=c('aT','dT','gT','aT3','dT3','gT3','TotalT','TotalT3','TotalTT3')
t='aT'
print(t)
curr=read.csv(paste(toupper(t),'_BLUE_2019.csv',sep=''))
View(curr)
View(curr)
curr=curr[c(2,3,4)]
View(curr)
curr$ID=paste(curr$Treatment,curr$Genotype,sep='_')
names(curr)[3]=t
curr=read.csv(paste(toupper(t),'_BLUE_2019.csv',sep=''))
curr=curr[c(2,3,4)]
names(curr)[3]='BLUE'
curr$Trait=t
View(curr)
for(t in traits){
print(t)
curr=read.csv(paste(toupper(t),'_BLUE_2019.csv',sep=''))
curr=curr[c(2,3,4)]
names(curr)[3]='BLUE'
curr$Trait=t
if(t=='aT'){all=curr}else{all=rbind(all,curr)}
}
View(all)
93/9
table(all$Trait)
traits=c('aT','dT','gT','aT3','dT3','gT3','TotalT','TotalT3','TotalTT3')
for(t in traits){
print(t)
curr=read.csv(paste(toupper(t),'_BLUE_2019.csv',sep=''))
curr=curr[c(2,3,4)]
names(curr)[3]='BLUE'
curr$Trait=t
if(t=='aT'){all=curr}else{all=rbind(all,curr)}
}
#no observation will be removed as outlier
write.csv(all[,-1],'consolidated_2019_metabolite_BLUE.csv',quote=F,row.names = F)
View(all)
table(all$Trait)
#no observation will be removed as outlier
write.csv(all,'consolidated_2019_metabolite_BLUE.csv',quote=F,row.names = F)
print(t)
curr=read.csv(paste(toupper(t),'_BLUE_2019.csv',sep=''))
View(all)
View(curr)
setwd("~/Desktop/L&D/pheno_results_mature_kernel/results_2019/BLUE_2019")
traits=c('aT','dT','gT','aT3','dT3','gT3','TotalT','TotalT3','TotalTT3')
for(t in traits){
print(t)
curr=read.csv(paste(toupper(t),'_BLUE_2019.csv',sep=''))
curr=curr[c(2,3,4,5)]
names(curr)[3]='BLUE'
curr$Trait=t
if(t=='aT'){all=curr}else{all=rbind(all,curr)}
}
#no observation will be removed as outlier
write.csv(all,'consolidated_2019_metabolite_BLUE.csv',quote=F,row.names = F)
setwd("~/Desktop/L&D/expression/DEG")
DEG=read.xls('full_DEG_list.xlsx')
View(DEG)
hist(DEG$Gene.ID)
hist(table(DEG$Gene.ID))
barplor(table(DEG$Gene.ID))
barplot(table(DEG$Gene.ID))
hist(table(DEG$Gene.ID))
hist(table(DEG$Gene.ID),break=10)
hist(table(DEG$Gene.ID),breaks=10)
diamonds
library(ggplot2)
View(diamonds)
ggplot(data=diamonds, aes(x=clarity)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), vjust=-1)
a=table(DEG$Gene.ID)
a
a=data.frame(table(DEG$Gene.ID))
View(a)
ggplot(data=a, aes(x=Freq)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), vjust=-1)
ggplot(data=a, aes(x=Freq)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), vjust=-1)+
theme_light()
ggplot(data=a, aes(x=Freq)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), vjust=-1)+
theme_light()+
labs(x='Number of comparisons',y='Count',title='DEG frequency')
ggplot(data=a, aes(x=Freq)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), vjust=-1)+
theme_light()+
labs(x='Number of comparisons',y='Count',title='DEG frequency')+
scale_x_discrete(limits=c(1:9))
ggplot(data=a, aes(x=Freq)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), vjust=-1)+
theme_light()+
labs(x='Number of comparisons',y='Count',title='DEG frequency')+
scale_x_discrete(limits=c('1','2','3','4','5','6','7','8','9'))
p=ggplot(data=a, aes(x=Freq)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), vjust=-1)+
theme_light()+
labs(x='Number of comparisons',y='Count',title='DEG frequency')+
scale_x_discrete(limits=c('1','2','3','4','5','6','7','8','9'))+
theme(
axis.text.x = element_text(face="bold",size = 8, color="black",family="serif"),
axis.text.y = element_text(face="bold",size = 8, color="black",family="serif"),
axis.title.x = element_text(face="bold",size = 12, color="black",family="serif"),
axis.title.y = element_text(face="bold",size = 12, color="black",family="serif"))
p
ggplot(data=a, aes(x=Freq)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), vjust=-1)+
theme_light()+
labs(x='Number of comparisons',y='Count',title='DEG frequency')+
scale_x_discrete(limits=c('1','2','3','4','5','6','7','8','9'))+
theme(
title =element_text(size=12, face='bold',family="serif"),
axis.text.x = element_text(face="bold",size = 8, color="black",family="serif"),
axis.text.y = element_text(face="bold",size = 8, color="black",family="serif"),
axis.title.x = element_text(face="bold",size = 12, color="black",family="serif"),
axis.title.y = element_text(face="bold",size = 12, color="black",family="serif"),
)
p=ggplot(data=a, aes(x=Freq)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), vjust=-1,family="serif")+
theme_light()+
labs(x='Number of comparisons',y='Count',title='DEG frequency')+
scale_x_discrete(limits=c('1','2','3','4','5','6','7','8','9'))+
theme(
title =element_text(size=12, face='bold',family="serif"),
axis.text.x = element_text(face="bold",size = 8, color="black",family="serif"),
axis.text.y = element_text(face="bold",size = 8, color="black",family="serif"),
axis.title.x = element_text(face="bold",size = 12, color="black",family="serif"),
axis.title.y = element_text(face="bold",size = 12, color="black",family="serif")
)
p
p=ggplot(data=a, aes(x=Freq)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), vjust=-1,family="serif",size = 10)+
theme_light()+
labs(x='Number of comparisons',y='Count',title='DEG frequency')+
scale_x_discrete(limits=c('1','2','3','4','5','6','7','8','9'))+
theme(
title =element_text(size=12, face='bold',family="serif"),
axis.text.x = element_text(face="bold",size = 8, color="black",family="serif"),
axis.text.y = element_text(face="bold",size = 8, color="black",family="serif"),
axis.title.x = element_text(face="bold",size = 12, color="black",family="serif"),
axis.title.y = element_text(face="bold",size = 12, color="black",family="serif")
)
p
p=ggplot(data=a, aes(x=Freq)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), vjust=-1,family="serif",size = 4)+
theme_light()+
labs(x='Number of comparisons',y='Count',title='DEG frequency')+
scale_x_discrete(limits=c('1','2','3','4','5','6','7','8','9'))+
theme(
title =element_text(size=12, face='bold',family="serif"),
axis.text.x = element_text(face="bold",size = 8, color="black",family="serif"),
axis.text.y = element_text(face="bold",size = 8, color="black",family="serif"),
axis.title.x = element_text(face="bold",size = 12, color="black",family="serif"),
axis.title.y = element_text(face="bold",size = 12, color="black",family="serif")
)
p
pdf('DEG_freq')
print(p)
dev.off()
setwd("~/Desktop/L&D/pheno_embryo/studentized_residuals")
traits=c('aT','dT','gT','aT3','dT3','gT3','TotalT','TotalT3','TotalTT3','chlorophyll')
# studentized residual bonferroni threshold -------------------------------
nbind = 42 #non-missing observations
fixed=3
random=2
threshold = qt(p= 1-0.05/(2*nbind), df=(nbind-(fixed+random+1)-1))
for(t in traits){
print(t)
curr=read.csv(paste(t,'.csv',sep=''))
curr=curr[c(1,2,3,21)]
curr$ID=paste(curr$Treatment,curr$Rep,curr$Genotype,sep='_')
names(curr)[4]=t
print(length(which(curr[,4]>threshold)))
if(t=='aT'){all=curr}else{all=merge(all,curr[,4:5],by='ID')}
}
#no observation will be removed as outlier
write.csv(all[,-1],'consolidated_studentized_resid.csv',quote=F,row.names = F)
setwd("~/Desktop/L&D/pheno_results_mature_kernel/results_2018/studentized_resid_SAS_2018")
setwd("~/Desktop/L&D/pheno_results_mature_kernel/results_2018/studentized_resid_SAS_2018")
traits=c('aT','dT','gT','aT3','dT3','gT3','TotalT','TotalT3','TotalTT3','chlorophyll')
nbind = 42 #non-missing observations
fixed=3
random=2
threshold = qt(p= 1-0.05/(2*nbind), df=(nbind-(fixed+random+1)-1))
print(t)
t='aT'
curr=read.csv(paste(t,'.csv',sep=''))
View(curr)
curr=curr[-1,]
curr=curr[c(1,2,3,15)]
View(curr)
curr$ID=paste(curr$Treatment,curr$Rep,curr$Genotype,sep='_')
names(curr)[4]=t
print(length(which(curr[,4]>threshold)))
if(t=='aT'){all=curr}else{all=merge(all,curr[,4:5],by='ID')}
View(all)
for(t in traits){
print(t)
curr=read.csv(paste(t,'.csv',sep=''))
curr=curr[-1,]
curr=curr[c(1,2,3,15)]
curr$ID=paste(curr$Treatment,curr$Rep,curr$Genotype,sep='_')
names(curr)[4]=t
print(length(which(curr[,4]>threshold)))
if(t=='aT'){all=curr}else{all=merge(all,curr[,4:5],by='ID')}
}
#no observation will be removed as outlier
write.csv(all[,-1],'consolidated_studentized_resid_2018.csv',quote=F,row.names = F)
setwd("~/Desktop/L&D/pheno_results_mature_kernel/results_2019/studentized_resid_SAS_2019")
traits=c('aT','dT','gT','aT3','dT3','gT3','TotalT','TotalT3','TotalTT3')
# studentized residual bonferroni threshold -------------------------------
nbind = 42 #non-missing observations
fixed=3
random=2
threshold = qt(p= 1-0.05/(2*nbind), df=(nbind-(fixed+random+1)-1))
for(t in traits){
print(t)
curr=read.csv(paste(t,'.csv',sep=''))
curr=curr[-1,]
curr=curr[c(1,2,3,15)]
curr$ID=paste(curr$Treatment,curr$Rep,curr$Genotype,sep='_')
names(curr)[4]=t
print(length(which(curr[,4]>threshold)))
if(t=='aT'){all=curr}else{all=merge(all,curr[,4:5],by='ID')}
}
#no observation will be removed as outlier
write.csv(all[,-1],'consolidated_studentized_resid_2019.csv',quote=F,row.names = F)
curr=read.csv(paste(t,'.csv',sep=''))
View(curr)
curr=curr[c(1,2,3,15)]
curr=curr[c(1,2,3,13)]
curr$ID=paste(curr$Treatment,curr$Rep,curr$Genotype,sep='_')
setwd("~/Desktop/L&D/pheno_results_mature_kernel/results_2019/studentized_resid_SAS_2019")
traits=c('aT','dT','gT','aT3','dT3','gT3','TotalT','TotalT3','TotalTT3')
# studentized residual bonferroni threshold -------------------------------
nbind = 42 #non-missing observations
fixed=3
random=2
threshold = qt(p= 1-0.05/(2*nbind), df=(nbind-(fixed+random+1)-1))
for(t in traits){
print(t)
curr=read.csv(paste(t,'.csv',sep=''))
curr=curr[c(1,2,3,13)]
curr$ID=paste(curr$Treatment,curr$Rep,curr$Genotype,sep='_')
names(curr)[4]=t
print(length(which(curr[,4]>threshold)))
if(t=='aT'){all=curr}else{all=merge(all,curr[,4:5],by='ID')}
}
#no observation will be removed as outlier
write.csv(all[,-1],'consolidated_studentized_resid_2019.csv',quote=F,row.names = F)
print(t)
curr=read.csv(paste(t,'.csv',sep=''))
curr=curr[c(1,2,3,13)]
curr$ID=paste(curr$Treatment,curr$Rep,curr$Genotype,sep='_')
names(curr)[4]=t
print(t)
curr=read.csv(paste(t,'.csv',sep=''))
curr=curr[c(1,2,3,13)]
View(curr)
curr=read.csv(paste(t,'.csv',sep=''))
View(curr)
curr=curr[c(1,2,3,14)]
setwd("~/Desktop/L&D/pheno_results_mature_kernel/results_2019/studentized_resid_SAS_2019")
traits=c('aT','dT','gT','aT3','dT3','gT3','TotalT','TotalT3','TotalTT3')
# studentized residual bonferroni threshold -------------------------------
nbind = 42 #non-missing observations
fixed=3
random=2
threshold = qt(p= 1-0.05/(2*nbind), df=(nbind-(fixed+random+1)-1))
for(t in traits){
print(t)
curr=read.csv(paste(t,'.csv',sep=''))
curr=curr[c(1,2,3,14)]
curr$ID=paste(curr$Treatment,curr$Rep,curr$Genotype,sep='_')
names(curr)[4]=t
print(length(which(curr[,4]>threshold)))
if(t=='aT'){all=curr}else{all=merge(all,curr[,4:5],by='ID')}
}
#no observation will be removed as outlier
write.csv(all[,-1],'consolidated_studentized_resid_2019.csv',quote=F,row.names = F)
#no observation will be removed as outlier
write.csv(all[,-1],'consolidated_studentized_resid_2019.csv',quote=F,row.names = F)
